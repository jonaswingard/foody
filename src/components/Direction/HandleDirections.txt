const [visible, setVisible] = useState(false);
const [position, setPosition] = useState({ left: 0, top: 0 });

{visible && (
	<div
		className="fixed bg-white border mt-5"
		style={{ left: position.left, top: position.top }}
	>
		{/* <Selector
			onClick={() => setVisible(false)}
			ingredients={ingredients}
		/> */}
	</div>
)}

{/* {directions?.map((direction) => (
	<li
		className="mb-4 p-3 rounded-lg shadow-md bg-white"
		key={direction}
	>
		<div
			onMouseUp={() => {
				if (!isEditing) {
					return;
				}

				const selection = window.getSelection();
				if (selection?.toString().trim()) {
					setVisible(true);

					const range = selection?.getRangeAt(0);
					const rect = range?.getBoundingClientRect();
					setPosition({
						left: rect?.width + rect?.left || 0,
						top: rect?.top - rect?.height - 8 || 0,
					});

					const direction = range.commonAncestorContainer.textContent;
					const words = direction?.split(" ");
					const word = selection?.toString();
					const wordIndex = words?.findIndex((w) => w === word);

					console.log({ wordIndex });
				}
			}}
		>
			<label className="flex gap-2">
				{!isEditing && (
					<input type="checkbox" className="peer hidden" />
				)}
				<div className="peer-checked:text-gray-300">{direction}</div>
			</label>
		</div>
	</li>
))} */}


 <Directions
		directions={directions}
		// directions={directions.map(
		//   (direction, index) =>
		//     addIngredientsToDirection(
		//       direction,
		//       index,
		//       mappings?.mappings,
		//       ingredients
		//     ) || direction
		// )}
		// ingredients={ingredients}
		isEditing={isEditing}